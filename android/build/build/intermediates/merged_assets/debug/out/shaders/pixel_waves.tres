[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform vec4 froth_color: hint_color = vec4(1.0, 1.0, 0.0, 1.0);
uniform vec4 shallow_color: hint_color = vec4(0.0, 0.0, 1.0, 1.0);
uniform vec4 deep_color: hint_color = vec4(0.0, 1.0, 0.0, 1.0);
uniform vec4 deepest_color: hint_color = vec4(1.0, 0.0, 0.0, 1.0);
uniform vec4 bottom_color: hint_color = vec4(0.0, 1.0, 0.0, 1.0);
uniform sampler2D noise;
uniform float speed = 0.25;
uniform float pixelate = 50.0;
uniform float waveSpeed: hint_range(0.01, 1.0) = 0.5;
uniform sampler2D gradient;
uniform sampler2D wave_details;

vec2 pixelize(vec2 uv) {
	return round(uv * float(pixelate)) / float(pixelate);
}

void fragment(){
	vec2 uv = vec2(UV.x, UV.y - TIME * speed);
	vec4 color = texture(noise, uv);
	vec4 grad = texture(gradient, uv);
	vec4 details = texture(wave_details, uv);
	
	details = round(details);
	grad.a = sin(uv.y * 75.0);
	color = mix(color, grad, grad.a - 0.8);
	
	// round the color up or down to black or white
	float offset = sin(TIME * waveSpeed);

	if (color.r + (offset - 0.95) > 0.55) {
		color = vec4(1.0);
	} else if (color.r + (offset - 0.9) > 0.52) {
		color = froth_color;
	}
	else if (color.r + ((offset) - 0.85) > 0.25) {
		color = shallow_color;
	} else if (color.r + ((offset) - 0.5) > 0.0) {
		color = deep_color;
	} else if (color.r + ((offset)) > -0.95) {
		color = deepest_color;
	} else {
		color = bottom_color;
	}
	
	COLOR = color;
}"
